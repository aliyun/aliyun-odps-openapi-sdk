import OpenApi;
import Util;
extends OpenApi;

init(config: OpenApi.Config){
  super(config);
}


model TableFieldSchema {
  fieldName?: string(name='fieldName', description='列名（如果是顶层列），或者 struct 字段名。', example=''),
  sqlTypeDefinition?: string(name='sqlTypeDefinition', description='在 SQL DDL 语句中填写的表示列类型的字符串定义。', example=''),
  typeCategory?: string(name='typeCategory', description='字段类型。'),
  mode?: string(name='mode', description='REQUIRED 或 NULLABLE。'),
  fields?: [TableFieldSchema](name='fields', description='如果是 STRUCT 类型，表示 STRUCT 的子字段。'),
  description?: string(name='description', description='列的评论。', example=''),
  policyTags?: PolicyTag(name='policyTags', description='可选。列绑定的 policy tag。'),
  maxLength?: string(name='maxLength', description='如果是 CHAR/VARCHAR 类型，表示字段的最大长度。', example=''),
  precision?: string(name='precision', description='如果 DECIMAL 类型，表示精度。', example=''),
  scale?: string(name='scale', description='如果 DECIMAL 类型，表示 scale。', example=''),
  defaultValueExpression?: string(name='defaultValueExpression', description='可选。默认值的表达式字符串。', example='')
}

model PolicyTag {
  names ?: [string]
}

model Field {
  fieldName?: string(name='fieldName', description='列名（如果是顶层列），或者 struct 字段名。', example='')
}

model SortingField {
    fieldName?: string(name='fieldName', description='列名（如果是顶层列），或者 struct 字段名。', example=''),
    order?: string(name='order', description='排序顺序', example='DESC')
}

model Clustering {
  type?: string(name='type', description='表的聚簇类型，目前支持 hash/range。'),
  fields?: [string](name='fields', description='聚簇列定义。'),
  numBuckets?: string(name='numBuckets', description='聚簇桶的个数。只有 hash clustering 才有此属性。创建 hash clustering 表时，如不指定桶个数，默认为 16。')
}

model Fields {
  fields?: [string](name='fields', description='主键列名列表。')
}

model TableConstraints {
  primaryKey?: Fields(name='primaryKey', description='表的主键。系统不为主键自动去重。')
}

model PartitionDefinition {
  partitionedColumn?: [PartitionedColumn]
}

model PartitionedColumn {
  field?: string
}

model TableFormatDefinition {
  transactional?: boolean(name='transactional'),
  version?: string(name='version')
}

model ExpirationOptions{
  expirationDays?: int32(name='expirationDays'),
  partitionExpirationDays?: int32(name='partitionExpirationDays')
}

model Table {
  etag?: string(name='etag', description='用于 read-modify-write 一致性校验。', example=''),
  name?: string(name='name', description='表的完整路径。e.g., projects/{projectId}/schemas/{schemaName}/tables/{tableName}', example=''),
  projectId: string(name='projectId', description='表所属的 project ID。', example=''),
  schemaName?: string(name='schemaName', description='表所属的 schema 名。', example=''),
  tableName: string(name='tableName', description='表名。', example=''),
  type?: string(name='type', description='表的类型。', example=''),
  description?: string(name='description', description='表的描述。等价于 SQL DDL 中表的 comment。', example=''),
  tableSchema?: TableFieldSchema(name='tableSchema', description='表列的 schema 定义。'),
  clustering?: Clustering(name='clustering', description='表的 cluster 属性定义，只有 cluster 表才有。'),
  tableConstraints?: TableConstraints(name='tableConstraints', description='表的主键约束定义，只有 delta 表才有。'),
  partitionDefinition?: PartitionDefinition(name='partitionDefinition', description='表的分区列定义，只有分区表才有。'),
  tableFormatDefinition?: TableFormatDefinition(name='tableFormatDefinition', description='可选。仅内表有此字段。默认为普通表格式。'),
  createTime?: string(name='createTime', description='表的创建时间（毫秒）。仅输出。'),
  lastModifiedTime?: string(name='lastModifiedTime', description='表的修改时间（毫秒）。仅输出。'),
  expirationOptions?: ExpirationOptions(name='expirationOptions', description='可选。表的过期时间配置。')
}

model HttpResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: string(name='body')
}

async function updateTable(table: Table): Table {
  var runtime = new Util.RuntimeOptions{};
  return requestWithModel(table, 'PUT', getTablePath(table), runtime);
}

async function deleteTable(table: Table): HttpResponse {
  var runtime = new Util.RuntimeOptions{};
  return requestWithoutModel(table, 'DELETE', getTablePath(table), runtime);
}

async function createTable(table: Table): Table {
  var runtime = new Util.RuntimeOptions{};
  return requestWithModel(table, 'POST', getTablesPath(table), runtime);
}

async function getTable(table: Table): Table {
  var runtime = new Util.RuntimeOptions{};
  return requestWithModel(table, 'GET', getTablePath(table), runtime);
}

function getTablePath(table: Table): string {
  if(Util.isUnset(table.schemaName)) {
    return `/api/catalog/v1alpha/projects/${table.projectId}/schemas/default/tables/${table.tableName}`;
  } else {
    return `/api/catalog/v1alpha/projects/${table.projectId}/schemas/${table.schemaName}/tables/${table.tableName}`;
  }
}

function getTablesPath(table: Table): string {
  if(Util.isUnset(table.schemaName)) {
    return `/api/catalog/v1alpha/projects/${table.projectId}/schemas/default/tables`;
  } else {
    return `/api/catalog/v1alpha/projects/${table.projectId}/schemas/${table.schemaName}/tables`;
  }
}